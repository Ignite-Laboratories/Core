package main

import (
	"fmt"
	"strings"
)

// This script was generated by an LLM to create the swizzler methods for RGBA and XYZW
// It might come in handy in the future =)

func main() {
	components := []string{"X", "Y", "Z"}

	// Generate for lengths 1 to 4
	for length := 1; length <= 3; length++ {
		// Comment block for this section
		fmt.Printf("\n// %d-component swizzles\n", length)

		// Generate all permutations with repetition
		generatePermutations(components, length, func(combo []string) {
			// Build the method name
			methodName := strings.Join(combo, "")

			// Build the return type signature
			returnTypes := make([]string, length)
			for i := 0; i < length; i++ {
				returnTypes[i] = "T"
			}
			returnTypeStr := strings.Join(returnTypes, ", ")

			// Build the return values
			returnVals := make([]string, length)
			for i, comp := range combo {
				returnVals[i] = "c." + comp
			}
			returnValStr := strings.Join(returnVals, ", ")

			// Generate the method
			fmt.Printf("func (c XYZW[T]) %s() (%s) { return %s }\n",
				methodName, returnTypeStr, returnValStr)
		})
	}
}

func generatePermutations(elements []string, length int, callback func([]string)) {
	result := make([]string, length)
	generatePermutationsRecursive(elements, length, 0, result, callback)
}

func generatePermutationsRecursive(elements []string, length, pos int, result []string, callback func([]string)) {
	if pos == length {
		// Make a copy of the result before calling callback
		temp := make([]string, len(result))
		copy(temp, result)
		callback(temp)
		return
	}

	for _, elem := range elements {
		result[pos] = elem
		generatePermutationsRecursive(elements, length, pos+1, result, callback)
	}
}
